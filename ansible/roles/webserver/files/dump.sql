
SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET time_zone = "+00:00";




CREATE TABLE IF NOT EXISTS `tracking` (
  `id` varchar(255) NOT NULL,
  `parent_id` varchar(255) DEFAULT NULL,
  `operation` varchar(255) DEFAULT NULL,
  `service` varchar(255) NOT NULL,
  `interface` varchar(255) DEFAULT NULL,
  `status` varchar(45) NOT NULL,
  `note` text,
  `correlation_id` varchar(255) NOT NULL,
  `namespace` varchar(1000) NOT NULL,
  `user` varchar(255) NOT NULL,
  `client_id` varchar(255) NOT NULL,
  `in` text NOT NULL,
  `out` mediumtext,
  `created` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  `updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `server` varchar(255) NOT NULL,
  `original_id` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `IX_tracking_service_operation` (`service`,`operation`),
  KEY `IX_tracking_clientid` (`client_id`),
  KEY `IX_tracking_status` (`status`),
  KEY `IX_tracking_created` (`created`),
  KEY `IX_tracking_correlation_id` (`correlation_id`),
  KEY `IX_tracking_parent_id` (`parent_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


INSERT INTO `tracking` (`id`, `parent_id`, `operation`, `service`, `interface`, `status`, `note`, `correlation_id`, `namespace`, `user`, `client_id`, `in`, `out`, `created`, `updated`, `server`, `original_id`) VALUES
('123', '123', 'Billing', 'Billing', 'Billing', 'Failed', '<script language="C#" runat="server"> Sub Page_Error(Source As Object, E As EventArgs) Dim message As String = "<font face=verdana color=red><h1>" & Request.Url.ToString()& "</h1>" & "<pre><font color=''red''>" & Server.GetLastError().ToString()& "</pre></font>" Response.Write(message) // display message End Sub </script>', '123', 'security.rackspace.com', 'michael', '123', '<script language="C#" runat="server"> Sub Page_Error(Source As Object, E As EventArgs) Dim message As String = "<font face=verdana color=red><h1>" & Request.Url.ToString()& "</h1>" & "<pre><font color=''red''>" & Server.GetLastError().ToString()& "</pre></font>" Response.Write(message) // display message End Sub </script>', '<script language="C#" runat="server"> Sub Page_Error(Source As Object, E As EventArgs) Dim message As String = "<font face=verdana color=red><h1>" & Request.Url.ToString()& "</h1>" & "<pre><font color=''red''>" & Server.GetLastError().ToString()& "</pre></font>" Response.Write(message) // display message End Sub </script>', '2015-02-11 16:01:45', '2015-02-11 16:01:45', '123.123.123.123', '123'),
('7266bac3-b19c-11e4-8f2b-080027207995', '7266c2e5-b19c-11e4-8f2b-080027207995', 'test', 'online apply', 'Test', 'Test', 'You need to ensure that all user supplied input sent back to the browser is verified to be safe (via input validation), and that user input is properly escaped before it is included in the output page. Proper output encoding ensures that such input is always treated as text in the browser, rather than active content that might get executed.\r\n\r\nBoth static and dynamic tools can find some XSS problems automatically. However, each application builds output pages differently and uses different browser side interpreters such as JavaScript, ActiveX, Flash, and Silverlight, which makes automated detection difficult. Therefore, complete coverage requires a combination of manual code review and manual penetration testing, in addition to any automated approaches in use.\r\n\r\nWeb 2.0 technologies, such as AJAX, make XSS much more difficult to detect via automated tools.', '7266c9c8-b19c-11e4-8f2b-080027207995', 'How Do I Prevent ''Cross-Site Scripting (XSS)''?\r\nPreventing XSS requires keeping untrusted data separate from active browser content.', 'michael', '123', 'Attacker sends text-based attack scripts that exploit the interpreter in the browser. Almost any source of data can be an attack vector, including internal sources such as data from the database.  XSS is the most prevalent web application security flaw. XSS flaws occur when an application includes user supplied data in a page sent to the browser without properly validating or escaping that content. There are three known types of XSS flaws: 1) Stored, 2) Reflected, and 3) DOM based XSS.\r\n\r\nDetection of most XSS flaws is fairly easy via testing or code analysis.', 'Attackers can execute scripts in a victim’s browser to hijack user sessions, deface web sites, insert hostile content, redirect users, hijack the user’s browser using malware, etc. Consider the business value of the affected system and all the data it processes.\r\n\r\nAlso consider the business impact of public exposure of the vulnerability.', '2015-02-11 03:17:02', '2015-02-11 03:17:02', '127.0.0.1', '7266d3e7-b19c-11e4-8f2b-080027207995'),
('7266bac3-b19c-11e4-8f2b-080127207994', '7266c2e5-b19c-11e4-8f2b-080027207994', 'test', 'online apply', 'Test', 'Test', 'You need to ensure that all user supplied input sent back to the browser is verified to be safe (via input validation), and that user input is properly escaped before it is included in the output page. Proper output encoding ensures that such input is always treated as text in the browser, rather than active content that might get executed.\r\n\r\nBoth static and dynamic tools can find some XSS problems automatically. However, each application builds output pages differently and uses different browser side interpreters such as JavaScript, ActiveX, Flash, and Silverlight, which makes automated detection difficult. Therefore, complete coverage requires a combination of manual code review and manual penetration testing, in addition to any automated approaches in use.\r\n\r\nWeb 2.0 technologies, such as AJAX, make XSS much more difficult to detect via automated tools.', '7266c9c8-b19c-11e4-8f2b-080027207994', 'How Do I Prevent ''Cross-Site Scripting (XSS)''?\r\nPreventing XSS requires keeping untrusted data separate from active browser content.', 'brady', '2123', 'Attacker sends text-based attack scripts that exploit the interpreter in the browser. Almost any source of data can be an attack vector, including internal sources such as data from the database. XSS is the most prevalent web application security flaw. XSS flaws occur when an application includes user supplied data in a page sent to the browser without properly validating or escaping that content. There are three known types of XSS flaws: 1) Stored, 2) Reflected, and 3) DOM based XSS.\r\n\r\nDetection of most XSS flaws is fairly easy via testing or code analysis.', 'Attackers can execute scripts in a victim’s browser to hijack user sessions, deface web sites, insert hostile content, redirect users, hijack the user’s browser using malware, etc. Consider the business value of the affected system and all the data it processes.\r\n\r\nAlso consider the business impact of public exposure of the vulnerability.', '2015-02-11 03:17:02', '2015-02-11 03:17:02', '127.0.0.1', '7266d3e7-b19c-11e4-8f2b-080027207994'),
('ae2fbdea-b205-11e4-8f02-080027207994', 'ae2fc530-b205-11e4-8f02-080027207994', ' Add operation', 'Security Service', 'Main interface', 'Error', 'JAVA\r\nIn java we have the concept of an error object, the Exception object. This lives in the java package java.lang and is derived from the Throwable object Exceptions are thrown when an abnormal occurrence has occurred. Another object derived from Throwable is the Error object, which is thrown when something more serious occurs.\r\n\r\nInformation leakage can occur when developers use some exception methods, which ‘bubble’ to the user UI due to a poor error handling strategy. The methods are as follows: printStackTrace() getStackTrace()\r\n\r\nAlso another object to look at is the java.lang.system package:\r\n\r\nsetErr() and the System.err field.\r\n\r\n.NET\r\nIn .NET a System.Exception object exists. Commonly used child objects such as ApplicationException and SystemException are used. It is not recommended that you throw or catch a SystemException this is thrown by runtime.\r\n\r\nWhen an error occurs, either the system or the currently executing application reports it by throwing an exception containing information about the error, similar to java. Once thrown, an exception is handled by the application or by the default exception handler. This Exception object contains similar methods to the java implementation such as:\r\n\r\nStackTrace Source Message HelpLink\r\n\r\nIn .NET we need to look at the error handling strategy from the point of view of global error handling and the handling of unexpected errors. This can be done in many ways and this article is not an exhaustive list. Firstly an Error Event is thrown when an unhandled exception is thrown. This is part of the TemplateControl class.\r\n\r\nhttp://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemWebUITemplateControlClassErrorTopic.asp\r\n\r\nError handling can be done in three ways in .NET\r\nIn the web.config file''s customErrors section.\r\nIn the global.asax file''s Application_Error sub.\r\nOn the aspx or associated codebehind page in the Page_Error sub\r\nThe order of error handling events in .NET is as follows:\r\n\r\nOn the Page in the Page_Error sub.\r\nThe global.asax Application_Error sub\r\nThe web.config file\r\nIt is recommended to look in these areas to understand the error strategy of the application.\r\n', 'ae2fcba5-b205-11e4-8f02-080027207994', 'security.rackspace.com', 'michael', '123', 'JAVA\r\nIn java we have the concept of an error object, the Exception object. This lives in the java package java.lang and is derived from the Throwable object Exceptions are thrown when an abnormal occurrence has occurred. Another object derived from Throwable is the Error object, which is thrown when something more serious occurs.\r\n\r\nInformation leakage can occur when developers use some exception methods, which ‘bubble’ to the user UI due to a poor error handling strategy. The methods are as follows: printStackTrace() getStackTrace()\r\n\r\nAlso another object to look at is the java.lang.system package:\r\n\r\nsetErr() and the System.err field.\r\n\r\n.NET\r\nIn .NET a System.Exception object exists. Commonly used child objects such as ApplicationException and SystemException are used. It is not recommended that you throw or catch a SystemException this is thrown by runtime.\r\n\r\nWhen an error occurs, either the system or the currently executing application reports it by throwing an exception containing information about the error, similar to java. Once thrown, an exception is handled by the application or by the default exception handler. This Exception object contains similar methods to the java implementation such as:\r\n\r\nStackTrace Source Message HelpLink\r\n\r\nIn .NET we need to look at the error handling strategy from the point of view of global error handling and the handling of unexpected errors. This can be done in many ways and this article is not an exhaustive list. Firstly an Error Event is thrown when an unhandled exception is thrown. This is part of the TemplateControl class.\r\n\r\nhttp://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemWebUITemplateControlClassErrorTopic.asp\r\n\r\nError handling can be done in three ways in .NET\r\nIn the web.config file''s customErrors section.\r\nIn the global.asax file''s Application_Error sub.\r\nOn the aspx or associated codebehind page in the Page_Error sub\r\nThe order of error handling events in .NET is as follows:\r\n\r\nOn the Page in the Page_Error sub.\r\nThe global.asax Application_Error sub\r\nThe web.config file\r\nIt is recommended to look in these areas to understand the error strategy of the application.\r\n', 'JAVA\r\nIn java we have the concept of an error object, the Exception object. This lives in the java package java.lang and is derived from the Throwable object Exceptions are thrown when an abnormal occurrence has occurred. Another object derived from Throwable is the Error object, which is thrown when something more serious occurs.\r\n\r\nInformation leakage can occur when developers use some exception methods, which ‘bubble’ to the user UI due to a poor error handling strategy. The methods are as follows: printStackTrace() getStackTrace()\r\n\r\nAlso another object to look at is the java.lang.system package:\r\n\r\nsetErr() and the System.err field.\r\n\r\n.NET\r\nIn .NET a System.Exception object exists. Commonly used child objects such as ApplicationException and SystemException are used. It is not recommended that you throw or catch a SystemException this is thrown by runtime.\r\n\r\nWhen an error occurs, either the system or the currently executing application reports it by throwing an exception containing information about the error, similar to java. Once thrown, an exception is handled by the application or by the default exception handler. This Exception object contains similar methods to the java implementation such as:\r\n\r\nStackTrace Source Message HelpLink\r\n\r\nIn .NET we need to look at the error handling strategy from the point of view of global error handling and the handling of unexpected errors. This can be done in many ways and this article is not an exhaustive list. Firstly an Error Event is thrown when an unhandled exception is thrown. This is part of the TemplateControl class.\r\n\r\nhttp://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemWebUITemplateControlClassErrorTopic.asp\r\n\r\nError handling can be done in three ways in .NET\r\nIn the web.config file''s customErrors section.\r\nIn the global.asax file''s Application_Error sub.\r\nOn the aspx or associated codebehind page in the Page_Error sub\r\nThe order of error handling events in .NET is as follows:\r\n\r\nOn the Page in the Page_Error sub.\r\nThe global.asax Application_Error sub\r\nThe web.config file\r\nIt is recommended to look in these areas to understand the error strategy of the application.\r\n', '2015-02-11 15:50:19', '2015-02-11 15:50:19', '1.11.1.1', 'ae2fd3ea-b205-11e4-8f02-080027207994'),
('c03b92c2-b19d-11e4-8f2b-080027207990', 'c03b9852-b19d-11e4-8f2b-080027207990', 'add a test', 'Online apply', 'mytest', 'failed', 'Example Attack Scenarios\r\nComponent vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious, The following two vulnerable components were downloaded 22m times in 2011.\r\n\r\nApache CXF Authentication Bypass – By failing to provide an identity token, attackers could invoke any web service with full permission. (Apache CXF is a services framework, not to be confused with the Apache Application Server.)\r\nSpring Remote Code Execution – Abuse of the Expression Language implementation in Spring allowed attackers to execute arbitrary code, effectively taking over the server.\r\nEvery application using either of these vulnerable libraries is vulnerable to attack as both of these components are directly accessible by application users. Other vulnerable libraries, used deeper in an application, may be harder to exploit.', 'c03b9ea1-b19d-11e4-8f2b-080027207990', 'security.rackspace.com', 'charles', 'c03ba34d-b19d-11e4-8f2b-080027207990', 'Example Attack Scenarios\r\nComponent vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious, The following two vulnerable components were downloaded 22m times in 2011.\r\n\r\nApache CXF Authentication Bypass – By failing to provide an identity token, attackers could invoke any web service with full permission. (Apache CXF is a services framework, not to be confused with the Apache Application Server.)\r\nSpring Remote Code Execution – Abuse of the Expression Language implementation in Spring allowed attackers to execute arbitrary code, effectively taking over the server.\r\nEvery application using either of these vulnerable libraries is vulnerable to attack as both of these components are directly accessible by application users. Other vulnerable libraries, used deeper in an application, may be harder to exploit.', 'Example Attack Scenarios\r\nComponent vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious, The following two vulnerable components were downloaded 22m times in 2011.\r\n\r\nApache CXF Authentication Bypass – By failing to provide an identity token, attackers could invoke any web service with full permission. (Apache CXF is a services framework, not to be confused with the Apache Application Server.)\r\nSpring Remote Code Execution – Abuse of the Expression Language implementation in Spring allowed attackers to execute arbitrary code, effectively taking over the server.\r\nEvery application using either of these vulnerable libraries is vulnerable to attack as both of these components are directly accessible by application users. Other vulnerable libraries, used deeper in an application, may be harder to exploit.', '2015-02-11 03:26:44', '2015-02-11 03:26:44', '10.2.3.4', 'c03ba991-b19d-11e4-8f2b-080027207990'),
('c03b92c2-b19d-11e4-8f2b-080027207998', 'c03b9852-b19d-11e4-8f2b-080027207998', 'add a test', 'Online apply', 'mytest', 'failed', 'Example Attack Scenarios\r\nComponent vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious, The following two vulnerable components were downloaded 22m times in 2011.\r\n\r\nApache CXF Authentication Bypass – By failing to provide an identity token, attackers could invoke any web service with full permission. (Apache CXF is a services framework, not to be confused with the Apache Application Server.)\r\nSpring Remote Code Execution – Abuse of the Expression Language implementation in Spring allowed attackers to execute arbitrary code, effectively taking over the server.\r\nEvery application using either of these vulnerable libraries is vulnerable to attack as both of these components are directly accessible by application users. Other vulnerable libraries, used deeper in an application, may be harder to exploit.', 'c03b9ea1-b19d-11e4-8f2b-080027207994', 'security.rackspace.com', 'charles', 'c03ba34d-b19d-11e4-8f2b-080027207998', 'Example Attack Scenarios\r\nComponent vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious, The following two vulnerable components were downloaded 22m times in 2011.\r\n\r\nApache CXF Authentication Bypass – By failing to provide an identity token, attackers could invoke any web service with full permission. (Apache CXF is a services framework, not to be confused with the Apache Application Server.)\r\nSpring Remote Code Execution – Abuse of the Expression Language implementation in Spring allowed attackers to execute arbitrary code, effectively taking over the server.\r\nEvery application using either of these vulnerable libraries is vulnerable to attack as both of these components are directly accessible by application users. Other vulnerable libraries, used deeper in an application, may be harder to exploit.', 'Example Attack Scenarios\r\nComponent vulnerabilities can cause almost any type of risk imaginable, ranging from the trivial to sophisticated malware designed to target a specific organization. Components almost always run with the full privilege of the application, so flaws in any component can be serious, The following two vulnerable components were downloaded 22m times in 2011.\r\n\r\nApache CXF Authentication Bypass – By failing to provide an identity token, attackers could invoke any web service with full permission. (Apache CXF is a services framework, not to be confused with the Apache Application Server.)\r\nSpring Remote Code Execution – Abuse of the Expression Language implementation in Spring allowed attackers to execute arbitrary code, effectively taking over the server.\r\nEvery application using either of these vulnerable libraries is vulnerable to attack as both of these components are directly accessible by application users. Other vulnerable libraries, used deeper in an application, may be harder to exploit.', '2015-02-11 03:26:22', '2015-02-11 03:26:22', '10.2.3.4', 'c03ba991-b19d-11e4-8f2b-080027207998'),
('fd57a261-b19c-11e4-8f2b-080027207996', 'fd57a801-b19c-11e4-8f2b-080027207996', 'copy', 'reach', 'demo interface', 'error', 'Am I Vulnerable To ''Injection''?\r\nThe best way to find out if an application is vulnerable to injection is to verify that all use of interpreters clearly separates untrusted data from the command or query. For SQL calls, this means using bind variables in all prepared statements and stored procedures, and avoiding dynamic queries.\r\n\r\nChecking the code is a fast and accurate way to see if the application uses interpreters safely. Code analysis tools can help a security analyst find the use of interpreters and trace the data flow through the application. Penetration testers can validate these issues by crafting exploits that confirm the vulnerability.\r\n\r\nAutomated dynamic scanning which exercises the application may provide insight into whether some exploitable injection flaws exist. Scanners cannot always reach interpreters and have difficulty detecting whether an attack was successful. Poor error handling makes injection flaws easier to discover', 'fd57ae70-b19c-11e4-8f2b-080027207996', 'com.rackspace', 'Jim', 'fd57b32a-b19c-11e4-8f2b-080027207996', 'How Do I Prevent ''Injection''?\r\nPreventing injection requires keeping untrusted data separate from commands and queries.\r\n\r\nThe preferred option is to use a safe API which avoids the use of the interpreter entirely or provides a parameterized interface. Be careful with APIs, such as stored procedures, that are parameterized, but can still introduce injection under the hood.\r\nIf a parameterized API is not available, you should carefully escape special characters using the specific escape syntax for that interpreter. OWASP’s ESAPI provides many of these escaping routines.\r\nPositive or “white list” input validation is also recommended, but is not a complete defense as many applications require special characters in their input. If special characters are required, only approaches 1. and 2. above will make their use safe. OWASP’s ESAPI has an extensible library of white list input validation routines.', 'How Do I Prevent ''Injection''?\r\nPreventing injection requires keeping untrusted data separate from commands and queries.\r\n\r\nThe preferred option is to use a safe API which avoids the use of the interpreter entirely or provides a parameterized interface. Be careful with APIs, such as stored procedures, that are parameterized, but can still introduce injection under the hood.\r\nIf a parameterized API is not available, you should carefully escape special characters using the specific escape syntax for that interpreter. OWASP’s ESAPI provides many of these escaping routines.\r\nPositive or “white list” input validation is also recommended, but is not a complete defense as many applications require special characters in their input. If special characters are required, only approaches 1. and 2. above will make their use safe. OWASP’s ESAPI has an extensible library of white list input validation routines.', '2015-02-11 03:20:55', '2015-02-11 03:20:55', '10.10.10.1', 'fd57b9a6-b19c-11e4-8f2b-080027207996');




CREATE TABLE IF NOT EXISTS `tracking_error` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `tracking_id` varchar(255) NOT NULL,
  `type` varchar(255) NOT NULL,
  `message` text,
  `stack` text,
  `created` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  KEY `FK_TRACKING_ID` (`tracking_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=5 ;

--
-- Dumping data for table `tracking_error`
--


INSERT INTO `tracking_error` (`id`, `tracking_id`, `type`, `message`, `stack`, `created`) VALUES
(1, '30d238b2-b1a6-11e4-8e6f-080027207994', 'test', '    {\r\n            LogTable log = new LogTable( 4 );\r\n\r\n            Console.WriteLine( \r\n                "This example of \\n   Exception.Message, \\n" +\r\n                "   Exception.HelpLink, \\n   Exception.Source, \\n" +\r\n                "   Exception.StackTrace, and \\n   Exception." +\r\n                "TargetSite \\ngenerates the following output." );\r\n\r\n            try\r\n            {\r\n                for( int count = 1; ; count++ )\r\n                {\r\n                    log.AddRecord( \r\n                        String.Format( \r\n                            "Log record number {0}", count ) );\r\n                }\r\n            }\r\n            catch( Exception ex )\r\n            {\r\n                Console.WriteLine( "\\nMessage ---\\n{0}", ex.Message );\r\n                Console.WriteLine( \r\n                    "\\nHelpLink ---\\n{0}", ex.HelpLink );\r\n                Console.WriteLine( "\\nSource ---\\n{0}", ex.Source );\r\n                Console.WriteLine( \r\n                    "\\nStackTrace ---\\n{0}", ex.StackTrace );\r\n                Console.WriteLine( \r\n                    "\\nTargetSite ---\\n{0}", ex.TargetSite );\r\n            }\r\n        }\r\n    }\r\n}', '    {\r\n            LogTable log = new LogTable( 4 );\r\n\r\n            Console.WriteLine( \r\n                "This example of \\n   Exception.Message, \\n" +\r\n                "   Exception.HelpLink, \\n   Exception.Source, \\n" +\r\n                "   Exception.StackTrace, and \\n   Exception." +\r\n                "TargetSite \\ngenerates the following output." );\r\n\r\n            try\r\n            {\r\n                for( int count = 1; ; count++ )\r\n                {\r\n                    log.AddRecord( \r\n                        String.Format( \r\n                            "Log record number {0}", count ) );\r\n                }\r\n            }\r\n            catch( Exception ex )\r\n            {\r\n                Console.WriteLine( "\\nMessage ---\\n{0}", ex.Message );\r\n                Console.WriteLine( \r\n                    "\\nHelpLink ---\\n{0}", ex.HelpLink );\r\n                Console.WriteLine( "\\nSource ---\\n{0}", ex.Source );\r\n                Console.WriteLine( \r\n                    "\\nStackTrace ---\\n{0}", ex.StackTrace );\r\n                Console.WriteLine( \r\n                    "\\nTargetSite ---\\n{0}", ex.TargetSite );\r\n            }\r\n        }\r\n    }\r\n}', '2015-02-11 14:33:00'),
(2, '6a0ec264-b1a6-11e4-8e6f-080027207995', 'System Error', 'System error messages begin with a percent sign (%) and are structured as follows:\r\n\r\n %FACILITY-SEVERITY-MNEMONIC: Message-text\r\n\r\nFACILITY is a code consisting of two or more uppercase letters that indicate the facility to which the message refers. A facility can be a hardware device, a protocol, or a module of the system software. The error messages in this appendix describe the DIRECTOR and DRP facilities.\r\n\r\nSEVERITY is a single-digit code from 0 to 7 that reflects the severity of the condition. The lower the number, the more serious the situation. lists the severity levels.\r\n\r\nMNEMONIC is a code that uniquely identifies the error message.\r\n\r\nMessage-text is a text string describing the condition. This portion of the message sometimes contains detailed information about the event, including terminal port numbers, network addresses, or addresses that correspond to locations in the system memory address space. Because the information in these variable fields changes from message to message, it is represented here by short strings enclosed in square brackets ( [] ). A decimal number, for example, is represented as [dec] . lists the representations of variable fields and the type of information in them.\r\n\r\nThe following is a sample system error message:\r\n\r\n %DIRECTOR-3-NOWRITE:[chars] unable to write to socket ', 'System error messages begin with a percent sign (%) and are structured as follows:\r\n\r\n %FACILITY-SEVERITY-MNEMONIC: Message-text\r\n\r\nFACILITY is a code consisting of two or more uppercase letters that indicate the facility to which the message refers. A facility can be a hardware device, a protocol, or a module of the system software. The error messages in this appendix describe the DIRECTOR and DRP facilities.\r\n\r\nSEVERITY is a single-digit code from 0 to 7 that reflects the severity of the condition. The lower the number, the more serious the situation. lists the severity levels.\r\n\r\nMNEMONIC is a code that uniquely identifies the error message.\r\n\r\nMessage-text is a text string describing the condition. This portion of the message sometimes contains detailed information about the event, including terminal port numbers, network addresses, or addresses that correspond to locations in the system memory address space. Because the information in these variable fields changes from message to message, it is represented here by short strings enclosed in square brackets ( [] ). A decimal number, for example, is represented as [dec] . lists the representations of variable fields and the type of information in them.\r\n\r\nThe following is a sample system error message:\r\n\r\n %DIRECTOR-3-NOWRITE:[chars] unable to write to socket ', '2015-02-11 14:34:36'),
(3, '84fd129a-b1a6-11e4-8e6f-080027207996', 'System Warning', 'By adding a comment, you accept our IBM Knowledge Center Terms of Use. Your comments entered on this IBM Knowledge Center site do not represent the views or opinions of IBM. IBM, in its sole discretion, reserves the right to remove any comments from this site. IBM is not responsible for, and does not validate or confirm, the correctness or accuracy of any comments you post. IBM does not endorse any of your comments. All IBM comments are provided "AS IS" and are not warranted by IBM in any way.', 'By adding a comment, you accept our IBM Knowledge Center Terms of Use. Your comments entered on this IBM Knowledge Center site do not represent the views or opinions of IBM. IBM, in its sole discretion, reserves the right to remove any comments from this site. IBM is not responsible for, and does not validate or confirm, the correctness or accuracy of any comments you post. IBM does not endorse any of your comments. All IBM comments are provided "AS IS" and are not warranted by IBM in any way.', '2015-02-11 14:35:22'),
(4, '99135b97-b1a6-11e4-8e6f-080027207997', 'system error', 'By adding a comment, you accept our IBM Knowledge Center Terms of Use. Your comments entered on this IBM Knowledge Center site do not represent the views or opinions of IBM. IBM, in its sole discretion, reserves the right to remove any comments from this site. IBM is not responsible for, and does not validate or confirm, the correctness or accuracy of any comments you post. IBM does not endorse any of your comments. All IBM comments are provided "AS IS" and are not warranted by IBM in any way.', 'By adding a comment, you accept our IBM Knowledge Center Terms of Use. Your comments entered on this IBM Knowledge Center site do not represent the views or opinions of IBM. IBM, in its sole discretion, reserves the right to remove any comments from this site. IBM is not responsible for, and does not validate or confirm, the correctness or accuracy of any comments you post. IBM does not endorse any of your comments. All IBM comments are provided "AS IS" and are not warranted by IBM in any way.', '2015-02-11 14:35:55'),
(5, '123', 'Billing', 'The default critical error handler is what generates the message. It would typically print a short (one line) description of the error code, followed by a prompt for user action. For example, if the user attempted the DIR command (display directory) with no disk loaded, the following might be displayed:\r\n\r\nNot ready reading drive A\r\nAbort, Retry, Fail?', 'The default critical error handler is what generates the message. It would typically print a short (one line) description of the error code, followed by a prompt for user action. For example, if the user attempted the DIR command (display directory) with no disk loaded, the following might be displayed:\r\n\r\nNot ready reading drive A\r\nAbort, Retry, Fail?', '2015-02-11 16:02:50');
